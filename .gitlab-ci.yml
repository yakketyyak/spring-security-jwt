image: maven:latest

variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  
#pour le cache des dépendances de l'application
cache:
  paths:
    - .m2/repository/

#Utiliser globalement ou par jobspackage bf.gov.dgi.core.library.common.endpoints.validators;


import org.jsoup.Jsoup;
import org.jsoup.safety.Whitelist;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import javax.validation.Constraint;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.Payload;



@Documented
@Constraint(validatedBy = NoXSSContentConstraintValidator.class)
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface NoXSSContent {
  String message() default "{NoXSSContent}";


  Class<?>[] groups() default {};


  Class<? extends Payload>[] payload() default {};
}


class NoXSSContentConstraintValidator implements ConstraintValidator<NoXSSContent, String> {

  private NoXSSContent noXSSContent;

  @Override
  public void initialize(NoXSSContent noSafe) {
    this.noXSSContent = noSafe;
  }

  @Override
  public boolean isValid(String safeContent, ConstraintValidatorContext cxt) {

    if (safeContent == null || safeContent.isBlank()) {
      return true;
    }


    return Jsoup.isValid(safeContent, Whitelist.none());
  }

}
before_script:
  - echo 'JESUS EST BON'
  - eval $(ssh-agent -s)

build_job:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS compile
  #artifacts pour les dépendances entre  les stages on partage le dossier target/ "*/target" dans le cas de multimodule
  artifacts:
    expire_in: 10 min
    paths: 
      - target/ 
      - "*/target"

test_job:
  stage: test
  script:
    - find . -name "*.class" -exec touch {} \+ #Eviter de recompiler les classes
    - mvn $MAVEN_CLI_OPTS test